/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.demo.revenue.controllers;

import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import com.demo.revenue.exception.ResourceNotFoundException;
import com.demo.revenue.model.Registration;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-07-26T12:04:46.409+10:00[Australia/Sydney]")

@Validated
@Api(value = "registration", tags = { "register vehicle" })
public interface RegistrationApi {

	default Optional<NativeWebRequest> getRequest() {
		return Optional.empty();
	}

	/**
	 * GET /registration : Get all vehicle registration
	 *
	 * @return Success (status code 200)
	 * @throws ResourceNotFoundException
	 */
	@ApiOperation(value = "Get all vehicle registration", nickname = "getRegisterVehicle", notes = "", response = Registration.class, responseContainer = "List", tags = {
			"register vehicle", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Success", response = Registration.class, responseContainer = "List") })
	@RequestMapping(value = "/registration", produces = {
			"application/json" }, method = RequestMethod.GET)
	default ResponseEntity<List<com.demo.revenue.dto.VehicleRegistration>> getRegisterVehicle()
			throws ResourceNotFoundException {
		getRequest().ifPresent(request -> {
			for (MediaType mediaType : MediaType
					.parseMediaTypes(request.getHeader("Accept"))) {
				if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
					String exampleString = "{ \"owner\" : { \"firstname\" : \"firstname\", \"id\" : 0, \"lastname\" : \"lastname\" }, \"id\" : 0, \"vehicle_id\" : { \"color\" : \"color\", \"plateNo\" : \"plateNo\", \"model\" : \"model\", \"id\" : 0 } }";
					ApiUtil.setExampleResponse(request, "application/json",
							exampleString);
					break;
				}
			}
		});
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	/**
	 * GET /registration/person/{id} : Get all vehicle registration by person id
	 *
	 * @param id Get person Id (required)
	 * @return Success (status code 200)
	 * @throws ResourceNotFoundException
	 */
	@ApiOperation(value = "Get all vehicle registration by person id", nickname = "getRegisterVehicleByPersonId", notes = "", response = Registration.class, responseContainer = "List", tags = {
			"register vehicle", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Success", response = Registration.class, responseContainer = "List") })
	@RequestMapping(value = "/registration/person/{id}", produces = {
			"application/json" }, method = RequestMethod.GET)
	default ResponseEntity<List<com.demo.revenue.dto.VehicleRegistration>> getRegisterVehicleByPersonId(
			@ApiParam(value = "Get person Id", required = true) @PathVariable("id") Long id)
			throws ResourceNotFoundException {
		getRequest().ifPresent(request -> {
			for (MediaType mediaType : MediaType
					.parseMediaTypes(request.getHeader("Accept"))) {
				if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
					String exampleString = "{ \"owner\" : { \"firstname\" : \"firstname\", \"id\" : 0, \"lastname\" : \"lastname\" }, \"id\" : 0, \"vehicle_id\" : { \"color\" : \"color\", \"plateNo\" : \"plateNo\", \"model\" : \"model\", \"id\" : 0 } }";
					ApiUtil.setExampleResponse(request, "application/json",
							exampleString);
					break;
				}
			}
		});
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	/**
	 * PUT /register_vehicle : Update register vehicle
	 *
	 * @param body Get Vehicle Registration (required)
	 * @return Success (status code 200) or Invalid input (status code 400) or
	 *         Resource not found (status code 404)
	 * @throws Exception
	 */
	@ApiOperation(value = "Update register vehicle", nickname = "putRegisterVehicle", notes = "", response = Object.class, tags = {
			"update vehicle registration", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Success", response = Object.class),
			@ApiResponse(code = 400, message = "Invalid input"),
			@ApiResponse(code = 404, message = "Resource not found") })
	@RequestMapping(value = "/register_vehicle", produces = {
			"application/json" }, consumes = {
					"application/json" }, method = RequestMethod.PUT)
	default ResponseEntity<Object> putRegisterVehicle(
			@ApiParam(value = "Get Vehicle Registration", required = true) @Valid @RequestBody Registration body)
			throws Exception {
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	/**
	 * POST /registration : Register vehicle
	 *
	 * @param body Register a Vehicle (required)
	 * @return Success (status code 200) or Invalid input (status code 400)
	 * @throws Exception
	 */
	@ApiOperation(value = "Register vehicle", nickname = "saveRegisterVehicle", notes = "", response = Object.class, tags = {
			"register vehicle", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Success", response = Object.class),
			@ApiResponse(code = 400, message = "Invalid input") })
	@RequestMapping(value = "/registration", produces = {
			"application/json" }, consumes = {
					"application/json" }, method = RequestMethod.POST)
	default ResponseEntity<Object> saveRegisterVehicle(
			@ApiParam(value = "Register a Vehicle", required = true) @Valid @RequestBody Registration body)
			throws Exception {
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

}
